Description: Fix runtime detection of NEON support on armhf and arm64
Author: Edmund Grimley Evans <edmund.grimley.evans@gmail.com>
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=767138
Forwarded: no
Reviewed-by: SÃ©bastien Villemot <sebastien@debian.org>
Last-Update: 2014-11-23
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/simd-support/neon.c
+++ b/simd-support/neon.c
@@ -23,56 +23,45 @@
 
 #if HAVE_NEON
 
-/* check for an environment where signals are known to work */
-#if defined(unix) || defined(linux)
-  # include <signal.h>
-  # include <setjmp.h>
-
-  static jmp_buf jb;
-
-  static void sighandler(int x)
-  {
-       UNUSED(x);
-       longjmp(jb, 1);
-  }
-
-  static int really_have_neon(void)
-  {
-       void (*oldsig)(int);
-       oldsig = signal(SIGILL, sighandler);
-       if (setjmp(jb)) {
-	    signal(SIGILL, oldsig);
-	    return 0;
-       } else {
-	    /* paranoia: encode the instruction in binary because the
-	       assembler may not recognize it without -mfpu=neon */
-	    /*asm volatile ("vand q0, q0, q0");*/
-	    asm volatile (".long 0xf2000150");
-	    signal(SIGILL, oldsig);
-	    return 1;
-       }
-  }
-
-  extern void X(check_alignment_of_sse2_pm)(void);
-
-  int X(have_simd_neon)(void)
-  {
-       static int init = 0, res;
-
-       if (!init) {
-	    res = really_have_neon();
-	    init = 1;
-       }
-       return res;
-  }
+#ifdef __linux__
 
+#ifdef __aarch64__
+
+/* HWCAP_ASIMD is defined in <asm/hwcap.h> but not included by <sys/auxv.h>.
+   Since all current AArch64 implementations have NEON/ASIMD it is probably
+   better to return 1 than include a header file which is not intended for
+   use by user programs. */
+
+int X(have_simd_neon)(void)
+{
+  return 1;
+}
 
 #else
-/* don't know how to autodetect NEON; assume it is present */
-  int X(have_simd_neon)(void)
-  {
-       return 1;
-  }
+
+#include <sys/auxv.h>
+
+int X(have_simd_neon)(void)
+{
+  static int cached = 2;
+  int ret;
+
+  /* This should be thread-safe in all reasonable circumstances. */
+  ret = cached;
+  if (ret == 2)
+    {
+      ret = !!(getauxval(AT_HWCAP) & HWCAP_ARM_NEON);
+      cached = ret;
+    }
+  return ret;
+}
+
+#endif
+
+#else
+
+#error Please implement a run-time test for NEON/ASIMD for your platform.
+
 #endif
 
 #endif
